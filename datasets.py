import uuid


class MinkowskiMethod(object):
    r = 2
    method = 'minkowski'

    def __init__(self, r=2):
        self.r = r

    def serialize(self):
        return {
            'r': self.r,
            'method': self.method
        }


class ImplicationMethod(object):
    method = 'implication-similarity'
    aggregator = 'average'
    implication = 'lukasiewicz'
    tnorm = 'lukasiewicz'

    def __init__(self, aggregator='average', implication='lukasiewicz', tnorm='lukasiewicz'):
        self.aggregator = aggregator
        self.implication = implication
        self.tnorm = tnorm

    def serialize(self):
        return {
            'method': self.method,
            'aggregator': self.aggregator,
            'implication': self.implication,
            'tnorm': self.tnorm
        }


class AngularDistanceMethod(object):
    def serialize(self):
        return {
            'method': 'angular-distance'
        }


class RawSets(object):
    setA = ""
    setB = ""

    def __init__(self, setA, setB):
        self.setA = setA
        self.setB = setB

    def serialize(self):
        return {
            'setA': self.setA,
            'setB': self.setB
        }


class DataSet(object):

    def toKeyLabelMap(self):
        return {
            'key': self.key,
            'label': self.label
        }

    def serialize(self):
        return {
            'label': self.label,
            'key': self.key,
            'description': self.description,
            'rawSets': self.rawSets.serialize(),
            'methods': map(lambda method: method.serialize(), self.methods)
        }

    def __init__(self, label, description):
        self.key = uuid.uuid4().hex
        self.label = label
        self.description = description
        self.rawSets = RawSets('', '')
        self.methods = []

    def withSetA(self, setA):
        self.rawSets.setA = setA
        return self

    def withSetB(self, setB):
        self.rawSets.setB = setB
        return self

    def withMethods(self, methods):
        self.methods = methods
        return self


DEFAULT_METHODS = [
    MinkowskiMethod(1),
    MinkowskiMethod(2),
    AngularDistanceMethod(),
    ImplicationMethod(aggregator='average'),
    ImplicationMethod(aggregator='minimum'),
    ImplicationMethod(aggregator='maximum')
]

DATA_SETS = [
    DataSet('Small cloned random sets', '')
        .withMethods(DEFAULT_METHODS)
        .withSetA("0.754081278931 0.7437 0.698 0.7241 0.7196 0.7019 0.7005 0.7309 0.7122 0.7162 0.7367 0.7407 0.7647 0.7167 0.6898 0.6857 0.6403 0.6349 0.6827 0.669")
        .withSetB("0.754081278931 0.7437 0.698 0.7241 0.7196 0.7019 0.7005 0.7309 0.7122 0.7162 0.7367 0.7407 0.7647 0.7167 0.6898 0.6857 0.6403 0.6349 0.6827 0.669"),
    DataSet('Large cloned random set', '200 elements')
        .withMethods(DEFAULT_METHODS)
        .withSetA("0.340211199032 0.3621 0.3926 0.3689 0.3981 0.3874 0.3409 0.3074 0.2888 0.332 0.3365 0.3721 0.4196 0.4677 0.4726 0.4485 0.4093 0.3736 0.3684 0.3198 0.279 0.2711 0.2442 0.2288 0.2454 0.2192 0.2131 0.1844 0.143 0.0955 0.0971 0.1319 0.1219 0.106 0.0676 0.0995 0.097 0.0878 0.0464 0.0225 0.0472 0.0795 0.1216 0.0963 0.0508 0.0752 0.081 0.0969 0.0686 0.0979 0.055 0.0274 0.0655 0.0873 0.0917 0.0496 0.0985 0.0514 0.0273 0.0467 0.0243 0.0088 0.0218 0.0195 0.04 0.0458 0.0389 0.004 0.0322 0.0621 0.0358 0.0833 0.0469 0.0584 0.0451 0.0236 0.0617 0.0842 0.0858 0.1283 0.1622 0.1472 0.111 0.0926 0.1242 0.1456 0.1737 0.2042 0.2343 0.2279 0.2273 0.2127 0.2615 0.2712 0.2843 0.2573 0.2533 0.2659 0.2456 0.2405 0.2418 0.2424 0.1964 0.1604 0.1783 0.1347 0.1236 0.1215 0.1441 0.1533 0.1084 0.0638 0.0944 0.1242 0.1281 0.1699 0.1426 0.1787 0.1437 0.1267 0.0943 0.0603 0.0295 0.0195 0.0258 0.0588 0.0629 0.0519 0.0887 0.0671 0.0769 0.0928 0.1391 0.1179 0.0942 0.0959 0.1017 0.1225 0.0829 0.0639 0.0423 0.0319 0.0586 0.0708 0.0888 0.099 0.0698 0.0571 0.0437 0.0658 0.0487 0.0426 0.0419 0.077 0.0742 0.0299 0.0068 0.0415 0.032 0.0696 0.0409 0.0255 0.0223 0.0403 0.0736 0.0896 0.0496 0.0538 0.0983 0.1118 0.0864 0.1119 0.1206 0.1071 0.0571 0.0906 0.0471 0.0114 0.0057 0.0073 0.0284 0.0712 0.0944 0.13 0.1196 0.141 0.1702 0.1267 0.092 0.0726 0.0738 0.0323 0.0266 0.0758 0.0836 0.062 0.0582 0.067 0.0243 0.0165")
        .withSetB("0.340211199032 0.3621 0.3926 0.3689 0.3981 0.3874 0.3409 0.3074 0.2888 0.332 0.3365 0.3721 0.4196 0.4677 0.4726 0.4485 0.4093 0.3736 0.3684 0.3198 0.279 0.2711 0.2442 0.2288 0.2454 0.2192 0.2131 0.1844 0.143 0.0955 0.0971 0.1319 0.1219 0.106 0.0676 0.0995 0.097 0.0878 0.0464 0.0225 0.0472 0.0795 0.1216 0.0963 0.0508 0.0752 0.081 0.0969 0.0686 0.0979 0.055 0.0274 0.0655 0.0873 0.0917 0.0496 0.0985 0.0514 0.0273 0.0467 0.0243 0.0088 0.0218 0.0195 0.04 0.0458 0.0389 0.004 0.0322 0.0621 0.0358 0.0833 0.0469 0.0584 0.0451 0.0236 0.0617 0.0842 0.0858 0.1283 0.1622 0.1472 0.111 0.0926 0.1242 0.1456 0.1737 0.2042 0.2343 0.2279 0.2273 0.2127 0.2615 0.2712 0.2843 0.2573 0.2533 0.2659 0.2456 0.2405 0.2418 0.2424 0.1964 0.1604 0.1783 0.1347 0.1236 0.1215 0.1441 0.1533 0.1084 0.0638 0.0944 0.1242 0.1281 0.1699 0.1426 0.1787 0.1437 0.1267 0.0943 0.0603 0.0295 0.0195 0.0258 0.0588 0.0629 0.0519 0.0887 0.0671 0.0769 0.0928 0.1391 0.1179 0.0942 0.0959 0.1017 0.1225 0.0829 0.0639 0.0423 0.0319 0.0586 0.0708 0.0888 0.099 0.0698 0.0571 0.0437 0.0658 0.0487 0.0426 0.0419 0.077 0.0742 0.0299 0.0068 0.0415 0.032 0.0696 0.0409 0.0255 0.0223 0.0403 0.0736 0.0896 0.0496 0.0538 0.0983 0.1118 0.0864 0.1119 0.1206 0.1071 0.0571 0.0906 0.0471 0.0114 0.0057 0.0073 0.0284 0.0712 0.0944 0.13 0.1196 0.141 0.1702 0.1267 0.092 0.0726 0.0738 0.0323 0.0266 0.0758 0.0836 0.062 0.0582 0.067 0.0243 0.0165"),

    DataSet('Small triangular set and it\'s and same set resized by 2 in x scale', 'Sets containing 20 elements')
        .withMethods(DEFAULT_METHODS)
        .withSetA("0 0 0 0 0 0 0 0 0 0 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 0.9 0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1")
        .withSetB("0.0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1.0 0.95 0.9 0.85 0.8 0.75 0.7 0.65 0.6 0.55 0.5 0.45 0.4 0.35 0.3 0.25 0.2 0.15 0.1 0.05"),
    DataSet('Large triangular set and it\'s and same set resized by 2 in x scale', 'Sets containing 200 elements')
        .withMethods(DEFAULT_METHODS)
        .withSetA("0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.6 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.7 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.9 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.0 0.99 0.98 0.97 0.96 0.95 0.94 0.93 0.92 0.91 0.9 0.89 0.88 0.87 0.86 0.85 0.84 0.83 0.82 0.81 0.8 0.79 0.78 0.77 0.76 0.75 0.74 0.73 0.72 0.71 0.7 0.69 0.68 0.67 0.66 0.65 0.64 0.63 0.62 0.61 0.6 0.59 0.58 0.57 0.56 0.55 0.54 0.53 0.52 0.51 0.5 0.49 0.48 0.47 0.46 0.45 0.44 0.43 0.42 0.41 0.4 0.39 0.38 0.37 0.36 0.35 0.34 0.33 0.32 0.31 0.3 0.29 0.28 0.27 0.26 0.25 0.24 0.23 0.22 0.21 0.2 0.19 0.18 0.17 0.16 0.15 0.14 0.13 0.12 0.11 0.1 0.09 0.08 0.07 0.06 0.05 0.04 0.03 0.02 0.01")
        .withSetB("0.0 0.005 0.01 0.015 0.02 0.025 0.03 0.035 0.04 0.045 0.05 0.055 0.06 0.065 0.07 0.075 0.08 0.085 0.09 0.095 0.1 0.105 0.11 0.115 0.12 0.125 0.13 0.135 0.14 0.145 0.15 0.155 0.16 0.165 0.17 0.175 0.18 0.185 0.19 0.195 0.2 0.205 0.21 0.215 0.22 0.225 0.23 0.235 0.24 0.245 0.25 0.255 0.26 0.265 0.27 0.275 0.28 0.285 0.29 0.295 0.3 0.305 0.31 0.315 0.32 0.325 0.33 0.335 0.34 0.345 0.35 0.355 0.36 0.365 0.37 0.375 0.38 0.385 0.39 0.395 0.4 0.405 0.41 0.415 0.42 0.425 0.43 0.435 0.44 0.445 0.45 0.455 0.46 0.465 0.47 0.475 0.48 0.485 0.49 0.495 0.5 0.505 0.51 0.515 0.52 0.525 0.53 0.535 0.54 0.545 0.55 0.555 0.56 0.565 0.57 0.575 0.58 0.585 0.59 0.595 0.6 0.605 0.61 0.615 0.62 0.625 0.63 0.635 0.64 0.645 0.65 0.655 0.66 0.665 0.67 0.675 0.68 0.685 0.69 0.695 0.7 0.705 0.71 0.715 0.72 0.725 0.73 0.735 0.74 0.745 0.75 0.755 0.76 0.765 0.77 0.775 0.78 0.785 0.79 0.795 0.8 0.805 0.81 0.815 0.82 0.825 0.83 0.835 0.84 0.845 0.85 0.855 0.86 0.865 0.87 0.875 0.88 0.885 0.89 0.895 0.9 0.905 0.91 0.915 0.92 0.925 0.93 0.935 0.94 0.945 0.95 0.955 0.96 0.965 0.97 0.975 0.98 0.985 0.99 0.995 1.0 0.995 0.99 0.985 0.98 0.975 0.97 0.965 0.96 0.955 0.95 0.945 0.94 0.935 0.93 0.925 0.92 0.915 0.91 0.905 0.9 0.895 0.89 0.885 0.88 0.875 0.87 0.865 0.86 0.855 0.85 0.845 0.84 0.835 0.83 0.825 0.82 0.815 0.81 0.805 0.8 0.795 0.79 0.785 0.78 0.775 0.77 0.765 0.76 0.755 0.75 0.745 0.74 0.735 0.73 0.725 0.72 0.715 0.71 0.705 0.7 0.695 0.69 0.685 0.68 0.675 0.67 0.665 0.66 0.655 0.65 0.645 0.64 0.635 0.63 0.625 0.62 0.615 0.61 0.605 0.6 0.595 0.59 0.585 0.58 0.575 0.57 0.565 0.56 0.555 0.55 0.545 0.54 0.535 0.53 0.525 0.52 0.515 0.51 0.505 0.5 0.495 0.49 0.485 0.48 0.475 0.47 0.465 0.46 0.455 0.45 0.445 0.44 0.435 0.43 0.425 0.42 0.415 0.41 0.405 0.4 0.395 0.39 0.385 0.38 0.375 0.37 0.365 0.36 0.355 0.35 0.345 0.34 0.335 0.33 0.325 0.32 0.315 0.31 0.305 0.3 0.295 0.29 0.285 0.28 0.275 0.27 0.265 0.26 0.255 0.25 0.245 0.24 0.235 0.23 0.225 0.22 0.215 0.21 0.205 0.2 0.195 0.19 0.185 0.18 0.175 0.17 0.165 0.16 0.155 0.15 0.145 0.14 0.135 0.13 0.125 0.12 0.115 0.11 0.105 0.1 0.095 0.09 0.085 0.08 0.075 0.07 0.065 0.06 0.055 0.05 0.045 0.04 0.035 0.03 0.025 0.02 0.015 0.01 0.005"),
    DataSet('Small triangular set and it\'s and same set resized by 2 in y scale', 'Sets containing 20 elements')
        .withMethods(DEFAULT_METHODS)
        .withSetA("0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 0.9 0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1")
        .withSetB("0.0 0.2 0.4 0.6 0.8 1.0 1.2 1.4 1.6 1.8 2.0 1.8 1.6 1.4 1.2 1.0 0.8 0.6 0.4 0.2"),
    DataSet('Large triangular set and it\'s and same set resized by 2 in y scale', 'Sets containing 200 elements')
        .withMethods(DEFAULT_METHODS)
        .withSetA("0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.6 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.7 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.9 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.0 0.99 0.98 0.97 0.96 0.95 0.94 0.93 0.92 0.91 0.9 0.89 0.88 0.87 0.86 0.85 0.84 0.83 0.82 0.81 0.8 0.79 0.78 0.77 0.76 0.75 0.74 0.73 0.72 0.71 0.7 0.69 0.68 0.67 0.66 0.65 0.64 0.63 0.62 0.61 0.6 0.59 0.58 0.57 0.56 0.55 0.54 0.53 0.52 0.51 0.5 0.49 0.48 0.47 0.46 0.45 0.44 0.43 0.42 0.41 0.4 0.39 0.38 0.37 0.36 0.35 0.34 0.33 0.32 0.31 0.3 0.29 0.28 0.27 0.26 0.25 0.24 0.23 0.22 0.21 0.2 0.19 0.18 0.17 0.16 0.15 0.14 0.13 0.12 0.11 0.1 0.09 0.08 0.07 0.06 0.05 0.04 0.03 0.02 0.01")
        .withSetB("0.0 0.02 0.04 0.06 0.08 0.1 0.12 0.14 0.16 0.18 0.2 0.22 0.24 0.26 0.28 0.3 0.32 0.34 0.36 0.38 0.4 0.42 0.44 0.46 0.48 0.5 0.52 0.54 0.56 0.58 0.6 0.62 0.64 0.66 0.68 0.7 0.72 0.74 0.76 0.78 0.8 0.82 0.84 0.86 0.88 0.9 0.92 0.94 0.96 0.98 1.0 1.02 1.04 1.06 1.08 1.1 1.12 1.14 1.16 1.18 1.2 1.22 1.24 1.26 1.28 1.3 1.32 1.34 1.36 1.38 1.4 1.42 1.44 1.46 1.48 1.5 1.52 1.54 1.56 1.58 1.6 1.62 1.64 1.66 1.68 1.7 1.72 1.74 1.76 1.78 1.8 1.82 1.84 1.86 1.88 1.9 1.92 1.94 1.96 1.98 2.0 1.98 1.96 1.94 1.92 1.9 1.88 1.86 1.84 1.82 1.8 1.78 1.76 1.74 1.72 1.7 1.68 1.66 1.64 1.62 1.6 1.58 1.56 1.54 1.52 1.5 1.48 1.46 1.44 1.42 1.4 1.38 1.36 1.34 1.32 1.3 1.28 1.26 1.24 1.22 1.2 1.18 1.16 1.14 1.12 1.1 1.08 1.06 1.04 1.02 1.0 0.98 0.96 0.94 0.92 0.9 0.88 0.86 0.84 0.82 0.8 0.78 0.76 0.74 0.72 0.7 0.68 0.66 0.64 0.62 0.6 0.58 0.56 0.54 0.52 0.5 0.48 0.46 0.44 0.42 0.4 0.38 0.36 0.34 0.32 0.3 0.28 0.26 0.24 0.22 0.2 0.18 0.16 0.14 0.12 0.1 0.08 0.06 0.04 0.02"),
    DataSet('Large triangular set and it\'s and same set resized by 2 in x and y scale', 'Sets containing 200 elements')
        .withMethods(DEFAULT_METHODS)
        .withSetA("0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.6 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.7 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.9 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.0 0.99 0.98 0.97 0.96 0.95 0.94 0.93 0.92 0.91 0.9 0.89 0.88 0.87 0.86 0.85 0.84 0.83 0.82 0.81 0.8 0.79 0.78 0.77 0.76 0.75 0.74 0.73 0.72 0.71 0.7 0.69 0.68 0.67 0.66 0.65 0.64 0.63 0.62 0.61 0.6 0.59 0.58 0.57 0.56 0.55 0.54 0.53 0.52 0.51 0.5 0.49 0.48 0.47 0.46 0.45 0.44 0.43 0.42 0.41 0.4 0.39 0.38 0.37 0.36 0.35 0.34 0.33 0.32 0.31 0.3 0.29 0.28 0.27 0.26 0.25 0.24 0.23 0.22 0.21 0.2 0.19 0.18 0.17 0.16 0.15 0.14 0.13 0.12 0.11 0.1 0.09 0.08 0.07 0.06 0.05 0.04 0.03 0.02 0.01")
        .withSetB("0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.6 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.7 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.9 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.0 1.01 1.02 1.03 1.04 1.05 1.06 1.07 1.08 1.09 1.1 1.11 1.12 1.13 1.14 1.15 1.16 1.17 1.18 1.19 1.2 1.21 1.22 1.23 1.24 1.25 1.26 1.27 1.28 1.29 1.3 1.31 1.32 1.33 1.34 1.35 1.36 1.37 1.38 1.39 1.4 1.41 1.42 1.43 1.44 1.45 1.46 1.47 1.48 1.49 1.5 1.51 1.52 1.53 1.54 1.55 1.56 1.57 1.58 1.59 1.6 1.61 1.62 1.63 1.64 1.65 1.66 1.67 1.68 1.69 1.7 1.71 1.72 1.73 1.74 1.75 1.76 1.77 1.78 1.79 1.8 1.81 1.82 1.83 1.84 1.85 1.86 1.87 1.88 1.89 1.9 1.91 1.92 1.93 1.94 1.95 1.96 1.97 1.98 1.99 2.0 1.99 1.98 1.97 1.96 1.95 1.94 1.93 1.92 1.91 1.9 1.89 1.88 1.87 1.86 1.85 1.84 1.83 1.82 1.81 1.8 1.79 1.78 1.77 1.76 1.75 1.74 1.73 1.72 1.71 1.7 1.69 1.68 1.67 1.66 1.65 1.64 1.63 1.62 1.61 1.6 1.59 1.58 1.57 1.56 1.55 1.54 1.53 1.52 1.51 1.5 1.49 1.48 1.47 1.46 1.45 1.44 1.43 1.42 1.41 1.4 1.39 1.38 1.37 1.36 1.35 1.34 1.33 1.32 1.31 1.3 1.29 1.28 1.27 1.26 1.25 1.24 1.23 1.22 1.21 1.2 1.19 1.18 1.17 1.16 1.15 1.14 1.13 1.12 1.11 1.1 1.09 1.08 1.07 1.06 1.05 1.04 1.03 1.02 1.01 1.0 0.99 0.98 0.97 0.96 0.95 0.94 0.93 0.92 0.91 0.9 0.89 0.88 0.87 0.86 0.85 0.84 0.83 0.82 0.81 0.8 0.79 0.78 0.77 0.76 0.75 0.74 0.73 0.72 0.71 0.7 0.69 0.68 0.67 0.66 0.65 0.64 0.63 0.62 0.61 0.6 0.59 0.58 0.57 0.56 0.55 0.54 0.53 0.52 0.51 0.5 0.49 0.48 0.47 0.46 0.45 0.44 0.43 0.42 0.41 0.4 0.39 0.38 0.37 0.36 0.35 0.34 0.33 0.32 0.31 0.3 0.29 0.28 0.27 0.26 0.25 0.24 0.23 0.22 0.21 0.2 0.19 0.18 0.17 0.16 0.15 0.14 0.13 0.12 0.11 0.1 0.09 0.08 0.07 0.06 0.05 0.04 0.03 0.02 0.01"),

    DataSet('Small constant sets with values 0.5 and 0', 'Sets containing 20 elements')
        .withMethods(DEFAULT_METHODS)
        .withSetA("0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0")
        .withSetB("0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5"),

    DataSet('Small constant sets with values 1 and 0', 'Sets containing 20 elements')
        .withMethods(DEFAULT_METHODS)
        .withSetA("0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0")
        .withSetB("1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0"),

    DataSet('Small random set with all values lower than 0.5', 'Sets containing 10 elements')
        .withMethods(DEFAULT_METHODS)
        .withSetA("0.288890456272 0.3477 0.275 0.3254 0.2856 0.3588 0.4091 0.341 0.3388 0.3501")
        .withSetB("0.220490129245 0.1026 0.0046 0.1339 0.2265 0.0884 0.2045 0.1548 0.2743 0.3878"),
    DataSet('Medium random set with all values lower than 0.5', 'Sets containing 50 elements')
        .withMethods(DEFAULT_METHODS)
        .withSetA("0.287230495809 0.2871 0.267 0.2909 0.3189 0.3686 0.4004 0.3717 0.3296 0.3415 0.3123 0.3219 0.3052 0.314 0.3124 0.2977 0.2986 0.2999 0.3059 0.2976 0.3179 0.2837 0.3267 0.3135 0.2737 0.2723 0.2417 0.2094 0.2364 0.1895 0.2274 0.1864 0.1475 0.1725 0.1655 0.1392 0.1103 0.0781 0.1044 0.06 0.104 0.1256 0.1281 0.0963 0.0633 0.0158 0.0282 0.0211 0.0617 0.0757")
        .withSetB("0.287994299689 0.2556 0.2201 0.1819 0.2137 0.1945 0.1544 0.1553 0.1945 0.1522 0.1443 0.1837 0.1875 0.2343 0.2276 0.2489 0.2624 0.2953 0.2944 0.2547 0.2636 0.216 0.2421 0.1997 0.2258 0.2735 0.2907 0.3237 0.2958 0.2993 0.2674 0.2457 0.2095 0.2426 0.2183 0.1913 0.1996 0.183 0.1863 0.1979 0.2058 0.235 0.2379 0.2119 0.1755 0.1312 0.1438 0.1501 0.173 0.1311"),
    DataSet('Large random set with all values lower than 0.5', 'Sets containing 100 elements')
        .withMethods(DEFAULT_METHODS)
        .withSetA("0.0896969550077 0.1026 0.1137 0.1607 0.1796 0.229 0.2295 0.2682 0.2925 0.2502 0.2731 0.2921 0.2891 0.2817 0.2402 0.2012 0.2119 0.1778 0.2079 0.2563 0.3052 0.3163 0.3066 0.3443 0.3084 0.2736 0.2241 0.1795 0.1495 0.1834 0.1424 0.1661 0.1758 0.1317 0.1484 0.1243 0.0761 0.0977 0.1365 0.1775 0.165 0.1587 0.1506 0.1992 0.1863 0.1537 0.1206 0.1135 0.1147 0.1546 0.1181 0.087 0.0869 0.0708 0.0353 0.0734 0.0513 0.0315 0.0014 0.0358 0.0281 0.0105 0.0212 0.0206 0.0545 0.0543 0.0176 0.0097 0.0406 0.071 0.0672 0.0778 0.0947 0.0886 0.1227 0.0768 0.0468 0.0857 0.0792 0.0785 0.0874 0.1095 0.0642 0.0566 0.0416 0.05 0.093 0.0791 0.0748 0.026 0.0161 0.0396 0.0037 0.031 0.0268 0.0304 0.0598 0.0955 0.0487 0.0713 0.0429 0.0237 0.0244 0.0251 0.0714 0.0274 0.0693 0.0463 0.0957 0.1306 0.1774 0.172 0.2029 0.2274 0.1854 0.1389 0.1143 0.1163 0.0909 0.0756 0.0791 0.091 0.0571 0.0902 0.053 0.0136 0.0593 0.0943 0.0838 0.102 0.1299 0.1386 0.1786 0.2163 0.2424 0.2259 0.193 0.1735 0.1941 0.2196 0.2013 0.1527 0.1452 0.1111 0.0912 0.0775 0.0354 0.0307 0.0284 0.0062 0.0311 0.0579 0.0439 0.0154 0.0525 0.0846 0.0521 0.0946 0.0742 0.0268 0.0715 0.0483 0.0136 0.0556 0.0165 0.0226 0.0174 0.0372 0.0015 0.0198 0.0507 0.0099 0.0057 0.0047 0.0029 0.0259 0.0174 0.0429 0.0579 0.035 0.0094 0.0436 0.0386 0.0328 0.036 0.067 0.1128 0.0845 0.1322 0.1017 0.1356 0.1233 0.125 0.1245 0.0975 0.1039 0.1504 0.1288 0.0828 0.0399")
        .withSetB("0.178333408931 0.1787 0.1883 0.144 0.1485 0.1154 0.1323 0.1329 0.1036 0.1521 0.1728 0.1626 0.1663 0.181 0.1409 0.1836 0.2068 0.1881 0.1613 0.1205 0.0926 0.0618 0.0159 0.0286 0.0047 0.0331 0.0106 0.046 0.0195 0.0529 0.0241 0.0605 0.0238 0.0496 0.0788 0.1276 0.1566 0.1277 0.1633 0.1668 0.1616 0.1134 0.1265 0.135 0.1366 0.178 0.2145 0.2198 0.191 0.1542 0.1582 0.1765 0.2097 0.2522 0.2773 0.2499 0.2422 0.2902 0.3205 0.3059 0.3424 0.3346 0.3788 0.3531 0.3142 0.2778 0.309 0.2676 0.2723 0.3116 0.2779 0.2836 0.2372 0.2221 0.2538 0.2725 0.2602 0.2251 0.2482 0.2733 0.3038 0.3531 0.3774 0.3693 0.4065 0.4343 0.431 0.4055 0.4187 0.3893 0.3777 0.3388 0.3021 0.3031 0.3499 0.3261 0.3109 0.3533 0.3414 0.3263 0.3062 0.3268 0.3545 0.4007 0.412 0.4216 0.4713 0.4589 0.4694 0.4895 0.4461 0.4773 0.4994 0.4502 0.4523 0.4443 0.4032 0.3981 0.4289 0.4076 0.3597 0.3986 0.4084 0.433 0.4395 0.4654 0.4694 0.4489 0.4439 0.4518 0.4466 0.4062 0.4559 0.4665 0.4478 0.4265 0.3843 0.3874 0.4299 0.3805 0.4124 0.3862 0.3946 0.3765 0.3719 0.3561 0.3188 0.2752 0.294 0.3421 0.3175 0.3388 0.35 0.3361 0.3036 0.2951 0.3102 0.2625 0.2544 0.2206 0.2415 0.235 0.2784 0.2548 0.3047 0.2996 0.3419 0.3546 0.3139 0.3015 0.2673 0.2613 0.2677 0.2629 0.2903 0.316 0.284 0.2873 0.2438 0.1996 0.165 0.1515 0.1828 0.1706 0.1433 0.1682 0.2119 0.2145 0.1814 0.1671 0.2064 0.174 0.1676 0.173 0.1368 0.1389 0.1123 0.1076 0.0974 0.1066"),
    DataSet('Small random set and it\'s rescaled version', 'Sets containing 10 elements')
        .withMethods(DEFAULT_METHODS)
        .withSetA("0.29905197377 0.3366 0.239 0.1556 0.2302 0.3228 0.2769 0.3028 0.3538 0.3328")
        .withSetB("0.59810394754 0.6732 0.478 0.3112 0.4604 0.6456 0.5538 0.6056 0.7076 0.6656"),
    DataSet('Medium random set and it\'s rescaled version', 'Sets containing 10 elements')
        .withMethods(DEFAULT_METHODS)
        .withSetA("0.329707706022 0.267 0.2679 0.2831 0.2065 0.294 0.2597 0.2402 0.1483 0.213 0.2248 0.1951 0.2029 0.1736 0.1833 0.2402 0.2718 0.241 0.1772 0.1895 0.2591 0.2633 0.2195 0.2724 0.221 0.2617 0.1888 0.2603 0.2624 0.257 0.3082 0.4059 0.4982 0.4598 0.4891 0.4877 0.4835 0.4962 0.4829 0.4562 0.396 0.326 0.2297 0.2796 0.309 0.2604 0.2245 0.1738 0.1933 0.1154")
        .withSetB("0.659415412044 0.534 0.5358 0.5662 0.413 0.588 0.5194 0.4804 0.2966 0.426 0.4496 0.3902 0.4058 0.3472 0.3666 0.4804 0.5436 0.482 0.3544 0.379 0.5182 0.5266 0.439 0.5448 0.442 0.5234 0.3776 0.5206 0.5248 0.514 0.6164 0.8118 0.9964 0.9196 0.9782 0.9754 0.967 0.9924 0.9658 0.9124 0.792 0.652 0.4594 0.5592 0.618 0.5208 0.449 0.3476 0.3866 0.2308"),
    DataSet('Large random set and it\'s rescaled version', 'Sets containing 10 elements')
        .withMethods(DEFAULT_METHODS)
        .withSetA("0.196397846108 0.2426 0.2435 0.3124 0.2796 0.2793 0.2819 0.3732 0.3704 0.4465 0.4742 0.4282 0.3495 0.4246 0.3858 0.4669 0.4313 0.4281 0.4554 0.3825 0.4349 0.3959 0.3122 0.2633 0.3263 0.3542 0.3887 0.3111 0.2364 0.1964 0.2811 0.2669 0.2393 0.1897 0.1316 0.0588 0.068 0.0835 0.0005 0.0477 0.1283 0.1883 0.1495 0.1158 0.1934 0.1753 0.2273 0.1934 0.2537 0.2799 0.2555 0.178 0.2171 0.3071 0.3354 0.3361 0.4141 0.3305 0.3991 0.3991 0.47 0.4389 0.4143 0.4833 0.4052 0.4912 0.4727 0.4846 0.407 0.3867 0.3641 0.4036 0.4734 0.4911 0.4556 0.4232 0.3975 0.4186 0.3589 0.332 0.2695 0.3302 0.3304 0.2387 0.25 0.3061 0.3941 0.3144 0.2278 0.2517 0.3504 0.3743 0.317 0.2362 0.2673 0.2585 0.3077 0.3242 0.4196 0.3332 0.2672 0.2358 0.2553 0.1702 0.2268 0.1866 0.1601 0.0969 0.1672 0.104 0.0932 0.0095 0.09 0.0852 0.1033 0.047 0.0236 0.0129 0.0941 0.116 0.1509 0.1815 0.1094 0.0801 0.0746 0.1425 0.218 0.1212 0.1575 0.1307 0.1023 0.1291 0.092 0.1891 0.1361 0.0375 0.1305 0.0931 0.0651 0.1309 0.178 0.121 0.2027 0.248 0.2711 0.1742 0.081 0.0103 0.0326 0.0356 0.0469 0.134 0.0528 0.0759 0.1612 0.2299 0.2967 0.2828 0.3761 0.4427 0.4451 0.4088 0.402 0.3827 0.3772 0.3185 0.346 0.3322 0.2699 0.2707 0.2611 0.1922 0.2166 0.1555 0.2529 0.2874 0.1882 0.2856 0.3426 0.4075 0.4277 0.392 0.3666 0.2743 0.3317 0.3352 0.3019 0.2992 0.3172 0.3234 0.2773 0.3617 0.3595 0.3326 0.3364 0.2999 0.3086 0.3728 0.3033 0.312")
        .withSetB("0.392795692215 0.4852 0.487 0.6248 0.5592 0.5586 0.5638 0.7464 0.7408 0.893 0.9484 0.8564 0.699 0.8492 0.7716 0.9338 0.8626 0.8562 0.9108 0.765 0.8698 0.7918 0.6244 0.5266 0.6526 0.7084 0.7774 0.6222 0.4728 0.3928 0.5622 0.5338 0.4786 0.3794 0.2632 0.1176 0.136 0.167 0.001 0.0954 0.2566 0.3766 0.299 0.2316 0.3868 0.3506 0.4546 0.3868 0.5074 0.5598 0.511 0.356 0.4342 0.6142 0.6708 0.6722 0.8282 0.661 0.7982 0.7982 0.94 0.8778 0.8286 0.9666 0.8104 0.9824 0.9454 0.9692 0.814 0.7734 0.7282 0.8072 0.9468 0.9822 0.9112 0.8464 0.795 0.8372 0.7178 0.664 0.539 0.6604 0.6608 0.4774 0.5 0.6122 0.7882 0.6288 0.4556 0.5034 0.7008 0.7486 0.634 0.4724 0.5346 0.517 0.6154 0.6484 0.8392 0.6664 0.5344 0.4716 0.5106 0.3404 0.4536 0.3732 0.3202 0.1938 0.3344 0.208 0.1864 0.019 0.18 0.1704 0.2066 0.094 0.0472 0.0258 0.1882 0.232 0.3018 0.363 0.2188 0.1602 0.1492 0.285 0.436 0.2424 0.315 0.2614 0.2046 0.2582 0.184 0.3782 0.2722 0.075 0.261 0.1862 0.1302 0.2618 0.356 0.242 0.4054 0.496 0.5422 0.3484 0.162 0.0206 0.0652 0.0712 0.0938 0.268 0.1056 0.1518 0.3224 0.4598 0.5934 0.5656 0.7522 0.8854 0.8902 0.8176 0.804 0.7654 0.7544 0.637 0.692 0.6644 0.5398 0.5414 0.5222 0.3844 0.4332 0.311 0.5058 0.5748 0.3764 0.5712 0.6852 0.815 0.8554 0.784 0.7332 0.5486 0.6634 0.6704 0.6038 0.5984 0.6344 0.6468 0.5546 0.7234 0.719 0.6652 0.6728 0.5998 0.6172 0.7456 0.6066 0.624"),
]


class DataSetProvider(object):
    def getAvailableDataSets(self):
        return {
            'dataSets': map(lambda dataset: dataset.toKeyLabelMap(), DATA_SETS)
        }

    def getDataset(self, key):
        filtered = filter(lambda dataSet: dataSet.key == key, DATA_SETS)
        if len(filtered) > 0:
            return {
                'dataSet': filtered[0].serialize()
            }
        else:
            return None
